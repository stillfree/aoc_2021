#!/usr/bin/env python3
import sys, time, math

def readInput():
    if( len( sys.argv ) == 2 ):
        file = open( sys.argv[1] , "r")
    else:
        file = open("input", "r")
    lines = [ element.rstrip() for element in file.readlines() ]
    return lines

def goleft( idx, idy, lines):
    counter = 0
    currentValue = int(lines[idx][idy])
    currentx = idx
    currenty = idy - 1
    lastValue = currentValue
    while(currenty > 0):
        value = int(lines[currentx][currenty])
        currenty -= 1
        if( value > lastValue ):
            counter += 1
            lastValue = value
            counter += goup(currentx, currenty, lines)
            counter += godown(currentx, currenty, lines)
        else:
            break
    return counter

def goright( idx, idy, lines):
    counter = 0
    currentValue = int(lines[idx][idy])
    currentx = idx
    currenty = idy+ 1
    lastValue = currentValue
    while(currenty < len(lines[0])):
        value = int(lines[currentx][currenty])
        print(currentValue, value, currentx, currenty)
        if( value > lastValue ):
            counter += 1
            lastValue = value
            counter += goup(currentx, currenty, lines)
            counter += godown(currentx, currenty, lines)
        else:
            break
        currenty += 1
    return counter

def goup( idx, idy, lines ):
    counter = 0
    currentValue = int(lines[idx][idy])
    currentx = idx +1
    currenty = idy
    lastValue = currentValue
    while(currentx < len(lines)):
        value = int(lines[currentx][currenty])
        print(currentValue, value, currentx, currenty)
        if( value > lastValue ):
            counter += 1
            lastValue = value
            counter += goleft(currentx, currenty, lines)
            counter += goright(currentx, currenty, lines)
        else:
            break
        currentx += 1
    return counter

def godown( idx, idy, lines ):
    counter = 0
    currentValue = int(lines[idx][idy])
    currentx = idx - 1
    currenty = idy
    lastValue = currentValue
    while(currentx > 0):
        value = int(lines[currentx][currenty])
        print(currentValue, value, currentx, currenty)
        if( value > lastValue ):
            counter += 1
            lastValue = value
            counter += goleft(currentx, currenty, lines)
            counter += goright(currentx, currenty, lines)
        else:
            break
        currentx += -1
    return counter

def partOne( lines ):
    counter = 0
    basins = []
    for idx, line in enumerate(lines):
        for idy, value in enumerate(line):
            value = int(value)
            oben = 9 if idx-1 < 0 else lines[idx-1][idy]
            unten = 9 if idx+1 >= len(lines)  else lines[idx+1][idy]
            left = 9 if idy-1 < 0 else lines[idx][idy-1]
            right =9 if idy+1 >= len(line) else lines[idx][idy+1]
            Lowest = True
            for i in [ int(e) for e in [oben, unten, left, right]]:
                if i <= value:
                    Lowest = False
            if Lowest:
                counter += value + 1
                basins.append([idx,idy])
                print(idx, idy)
    print("PartOne:", counter)

    for basin in basins:
        idx, idy = basin
        #go left
        counter = set([idx,idy])
        counter.add(goleft(idx, idy, lines))
        counter.add(goright(idx, idy, lines))
        counter.add( godown(idx, idy, lines)
        counter += goup(idx, idy, lines)
        basin.append(counter)
        #counter += goup(idx, idy, lines)
    print(basins)



def main():
    lines = readInput()
    partOne( lines )


if __name__ == "__main__":
    main()
